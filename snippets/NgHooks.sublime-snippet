<snippet>
	<content><![CDATA[
		ngOnChanges(changes: SimpleChanges): void {
			//Called before any other lifecycle hooks. Use it to inject dependencies, but avoid any serious work here.
			//Add '${implements OnChanges}' to the class.
			$0
		}
	]]></content >
	<tabTrigger>ngOnChanges</tabTrigger>
</snippet>
<snippet>
	<content><![CDATA[
		ngOnInit(): void {
			//Called after the constructor, initializing input properties, and the first call to ngOnChanges.
			//Add 'implements OnInit' to the class.
			$0
		}
	]]></content >
	<tabTrigger>ngOnInit</tabTrigger>
</snippet>
<snippet>
	<content><![CDATA[
		ngDoCheck() {
			//Called every time that the input properties of a component or a directive are checked. Use it to extend change detection by performing a custom check.
			//Add 'implements DoCheck' to the class.
			$0
		}
	]]></content >
	<tabTrigger>ngDoCheck</tabTrigger>
</snippet>
<snippet>
	<content><![CDATA[
		ngAfterContentInit() {
			//Called after ngOnInit when the component's or directive's content has been initialized.
			//Add 'implements AfterContentInit' to the class.
			$0
		}
	]]></content >
	<tabTrigger>ngAfterContentInit</tabTrigger>
</snippet>
<snippet>
	<content><![CDATA[
		ngAfterContentChecked() {
			//Called after every check of the component's or directive's content.
			//Add 'implements AfterContentChecked' to the class.
			$0
		}
	]]></content >
	<tabTrigger>ngAfterContentChecked</tabTrigger>
</snippet>
<snippet>
	<content><![CDATA[
		ngAfterViewInit() {
			//Called after ngAfterContentInit when the component's view has been initialized. Applies to components only.
			//Add 'implements AfterViewInit' to the class.
			$0
		}
	]]></content >
	<tabTrigger>ngAfterViewInit</tabTrigger>
</snippet>
<snippet>
	<content><![CDATA[
		ngAfterViewChecked() {
			//Called after every check of the component's view. Applies to components only.
			//Add 'implements AfterViewChecked' to the class.
			$0
		}
	]]></content >
	<tabTrigger>ngAfterViewChecked</tabTrigger>
</snippet>
<snippet>
	<content><![CDATA[
		ngOnDestroy(): void {
			//Called once, before the instance is destroyed.
			//Add 'implements OnDestroy' to the class.
			$0
		}
	]]></content >
	<tabTrigger>ngOnDestroy</tabTrigger>
</snippet>