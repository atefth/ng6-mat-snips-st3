<snippet>
	<content><![CDATA[
		import { Directive } from '@angular/core';
		
		@Directive({
			selector: '${1:selector}',
		})
		export class ${2:Name}Directive {${3: }}
		$0
	]]></content >
	<tabTrigger>ngDirective</tabTrigger>
</snippet >
<snippet>
	<content><![CDATA[
		import { Directive, ElementRef, Input } from '@angular/core';
		
		@Directive({
			selector: '[${1:selector}]',
		})
		export class ${2:Name}Directive {
			constructor(private elementRef: ElementRef) {}
		
			private ${3:name}(${4:value}: string) {
				this.elementRef.nativeElement.style.${5:proptery} = ${6:value};
			}
		}
		$0
	]]></content >
	<tabTrigger>ngDirectiveCss</tabTrigger>
</snippet >
<snippet>
	<content><![CDATA[
		import { Directive } from '@angular/core';
		
		@Directive({
			selector: '[${1:app}${2:Name}]',
		})
		export class ${2:Name}Directive {${4: }}
		$0
	]]></content >
	<tabTrigger>ngDirectiveAttribute</tabTrigger>
</snippet >
<snippet>
	<content><![CDATA[
		import { Directive } from '@angular/core';
		import { Validator, NG_VALIDATORS, FormControl } from '@angular/forms';
		
		@Directive({
			selector: '[${validatorName}][ngModel]',
			providers: [
				{ provide: NG_VALIDATORS, useExisting: ${className}, multi: true }
			]
		})
		
		export class ${className} implements Validator {
			validate(c: FormControl): { [key: string]: any } {
				if (valid) {
					return null;
				}
		
				return {
					${validatorName}: {
						valid: false
					}
				};
			}
		}
		$0
	]]></content >
	<tabTrigger>ngDirectiveValiadtor</tabTrigger>
</snippet >
