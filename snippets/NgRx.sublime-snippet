<snippet>
  <content><![CDATA[
  "Angular ngRx Reducer": {
    "prefix": "ngrx-reducer",
    "description": "ngRx Reducer",
    "types": "typescript",
    "body": [
      "import * as ${class} from '../actions/${class}';",
      "",
      "export interface State {",
      " \t\t$1",
      "};",
      "",
      "const initialState: State = {",
      "\t\t$2",
      "};",
      "",
      "export function reducer(state = initialState, action: ${class}.Actions ): State {",
      "\tswitch (action.type) {",
      "\t\tcase ${class}.ActionTypes.${TYPE}: {",
      "\t\t\treturn {",
      "\t\t\t\t// return new ${class} state",
      "\t\t\t};",
      "\t\t}",
      "",
      "\t\tdefault: {",
      "\t\t\treturn state;",
      "\t\t}",
      "\t}",
      "}"
    ]
  } 
  ]]></content >
  <tabTrigger>ngRxReducer</tabTrigger>
</snippet>
<snippet>
  <content><![CDATA[
  "Angular ngRx Actions": {
    "prefix": "ngrx-actions",
    "description": "ngRx Actions class",
    "types": "typescript",
    "body": [
      "import { Action } from '@ngrx/store';",
      "",
      "/**",
      " * For each action type in an action group, make a simple",
      " * enum object for all of this group's action types.",
      " */",
      "export enum ${Class}ActionTypes {",
      "\t${Verb1} = '[${Class}] ${Verb1}',",
      "\t${Verb2} = '[${Class}] ${Verb2}'",
      "};",
      "",
      "/**",
      " * Every action is comprised of at least a type and an optional",
      " * payload. Expressing actions as classes enables powerful ",
      " * type checking in reducer functions.",
      " */",
      "export class ${Verb1} implements Action {",
      "\treadonly type = ${Class}ActionTypes.${Verb1};",
      "",
      "\tconstructor(public payload: ${payloadType}) { }",
      "}",
      "",
      "export class ${Verb2} implements Action {",
      "\treadonly type = ${Class}ActionTypes.${Verb2};",
      "",
      "\tconstructor(public payload: ${payloadType2}) { }",
      "}",
      "",
      "/**",
      " * Export a type alias of all actions in this action group",
      " * so that reducers can easily compose action types",
      " */",
      "export type ${Class}Actions",
      "\t\t\t\t\t\t= ${Verb1}",
      "\t\t\t\t\t\t| ${Verb2};",
      ""
    ]
  } 
  ]]></content >
  <tabTrigger>ngRxActions</tabTrigger>
</snippet>
<snippet>
  <content><![CDATA[
  "Angular ngRx Action": {
    "prefix": "ngrx-action-const",
    "description": "ngRx Single action",
    "types": "typescript",
    "body": [
      "export const ${ACTION} = '[${NameSpace}] ${ACTION}';",
      "$0"
    ]
  } 
  ]]></content >
  <tabTrigger>ngRxAction</tabTrigger>
</snippet>
<snippet>
  <content><![CDATA[
  "Angular ngRx Action Creator": {
    "prefix": "ngrx-action-creator",
    "description": "ngRx Single action with const",
    "types": "typescript",
    "body": [
      "export const ${ACTION} = '[${NameSpace}] ${ACTION}';",
      "$0",
      "export class ${Class} implements Action {",
      "\treadonly type = ${ACTION};",
      "",
      "\tconstructor(public payload: ${payloadType}) { }",
      "}",
      ""
    ]
  } 
  ]]></content >
  <tabTrigger>ngRxAction-create</tabTrigger>
</snippet>
<snippet>
  <content><![CDATA[
  "Angular ngRx Action Enum": {
    "prefix": "ngrx-action-enum",
    "description": "ngRx Single action with enum",
    "types": "typescript",
    "body": [
      "export class ${Verb} implements Action {",
      "\treadonly type = ${Class}ActionTypes.${Verb};",
      "",
      "\tconstructor(public payload: ${payloadType}) { }",
      "}"
    ]
  } 
  ]]></content >
  <tabTrigger>ngRxAction-enum</tabTrigger>
</snippet>
<snippet>
  <content><![CDATA[
  "Angular ngRx Enum ActionType": {
    "prefix": "ngrx-actiontype-enum",
    "description": "ngRx enum action type",
    "types": "typescript",
    "body": [
      "${Verb} = '[${Class}] ${Verb}'$0"       
    ]
  } 
  ]]></content >
  <tabTrigger>ngRxEnum-actionType</tabTrigger>
</snippet>
<snippet>
  <content><![CDATA[
  "Angular ngRx Effect": {
    "prefix": "ngrx-effect",
    "description": "ngRx Effect",
    "types": "typescript",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { Observable } from 'rxjs';",
      "import { Action } from '@ngrx/store';",
      "import { Actions, Effect } from '@ngrx/effects';",
      "",
      "@Injectable()",
      "export class ${Name}Effects {",
      "\t@Effect() ${name}$: Observable<Action> = this.actions$.ofType('${ACTIONTYPE}')$1;",
      "",
      "\tconstructor(",
      "\t\tprivate ${actions}$: Actions",
      "\t) {}",
      "}"
    ]
  } 
  ]]></content >
  <tabTrigger>ngRxEffect</tabTrigger>
</snippet>